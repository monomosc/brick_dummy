// Code generated by protoc-gen-go. DO NOT EDIT.
// source: capb/ca.proto

package capb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import corepb "brick/grpc/corepb"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CompleteOrderRequest struct {
	Order                *corepb.Order `protobuf:"bytes,1,opt,name=Order,proto3" json:"Order,omitempty"`
	Csr                  []byte        `protobuf:"bytes,2,opt,name=Csr,proto3" json:"Csr,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *CompleteOrderRequest) Reset()         { *m = CompleteOrderRequest{} }
func (m *CompleteOrderRequest) String() string { return proto.CompactTextString(m) }
func (*CompleteOrderRequest) ProtoMessage()    {}
func (*CompleteOrderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca_3d1cf0f2559c5724, []int{0}
}
func (m *CompleteOrderRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CompleteOrderRequest.Unmarshal(m, b)
}
func (m *CompleteOrderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CompleteOrderRequest.Marshal(b, m, deterministic)
}
func (dst *CompleteOrderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CompleteOrderRequest.Merge(dst, src)
}
func (m *CompleteOrderRequest) XXX_Size() int {
	return xxx_messageInfo_CompleteOrderRequest.Size(m)
}
func (m *CompleteOrderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CompleteOrderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CompleteOrderRequest proto.InternalMessageInfo

func (m *CompleteOrderRequest) GetOrder() *corepb.Order {
	if m != nil {
		return m.Order
	}
	return nil
}

func (m *CompleteOrderRequest) GetCsr() []byte {
	if m != nil {
		return m.Csr
	}
	return nil
}

type CaCertificateList struct {
	CaCerts              []*corepb.CaCertificate `protobuf:"bytes,1,rep,name=CaCerts,proto3" json:"CaCerts,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *CaCertificateList) Reset()         { *m = CaCertificateList{} }
func (m *CaCertificateList) String() string { return proto.CompactTextString(m) }
func (*CaCertificateList) ProtoMessage()    {}
func (*CaCertificateList) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca_3d1cf0f2559c5724, []int{1}
}
func (m *CaCertificateList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CaCertificateList.Unmarshal(m, b)
}
func (m *CaCertificateList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CaCertificateList.Marshal(b, m, deterministic)
}
func (dst *CaCertificateList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CaCertificateList.Merge(dst, src)
}
func (m *CaCertificateList) XXX_Size() int {
	return xxx_messageInfo_CaCertificateList.Size(m)
}
func (m *CaCertificateList) XXX_DiscardUnknown() {
	xxx_messageInfo_CaCertificateList.DiscardUnknown(m)
}

var xxx_messageInfo_CaCertificateList proto.InternalMessageInfo

func (m *CaCertificateList) GetCaCerts() []*corepb.CaCertificate {
	if m != nil {
		return m.CaCerts
	}
	return nil
}

type GenerateCRLRequest struct {
	CaName               string   `protobuf:"bytes,1,opt,name=CaName,proto3" json:"CaName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GenerateCRLRequest) Reset()         { *m = GenerateCRLRequest{} }
func (m *GenerateCRLRequest) String() string { return proto.CompactTextString(m) }
func (*GenerateCRLRequest) ProtoMessage()    {}
func (*GenerateCRLRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca_3d1cf0f2559c5724, []int{2}
}
func (m *GenerateCRLRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GenerateCRLRequest.Unmarshal(m, b)
}
func (m *GenerateCRLRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GenerateCRLRequest.Marshal(b, m, deterministic)
}
func (dst *GenerateCRLRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenerateCRLRequest.Merge(dst, src)
}
func (m *GenerateCRLRequest) XXX_Size() int {
	return xxx_messageInfo_GenerateCRLRequest.Size(m)
}
func (m *GenerateCRLRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GenerateCRLRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GenerateCRLRequest proto.InternalMessageInfo

func (m *GenerateCRLRequest) GetCaName() string {
	if m != nil {
		return m.CaName
	}
	return ""
}

type OCSPResponse struct {
	OCSP                 []byte   `protobuf:"bytes,1,opt,name=OCSP,proto3" json:"OCSP,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OCSPResponse) Reset()         { *m = OCSPResponse{} }
func (m *OCSPResponse) String() string { return proto.CompactTextString(m) }
func (*OCSPResponse) ProtoMessage()    {}
func (*OCSPResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca_3d1cf0f2559c5724, []int{3}
}
func (m *OCSPResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OCSPResponse.Unmarshal(m, b)
}
func (m *OCSPResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OCSPResponse.Marshal(b, m, deterministic)
}
func (dst *OCSPResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OCSPResponse.Merge(dst, src)
}
func (m *OCSPResponse) XXX_Size() int {
	return xxx_messageInfo_OCSPResponse.Size(m)
}
func (m *OCSPResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_OCSPResponse.DiscardUnknown(m)
}

var xxx_messageInfo_OCSPResponse proto.InternalMessageInfo

func (m *OCSPResponse) GetOCSP() []byte {
	if m != nil {
		return m.OCSP
	}
	return nil
}

type OCSPIdRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Nonce                []byte   `protobuf:"bytes,2,opt,name=Nonce,proto3" json:"Nonce,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OCSPIdRequest) Reset()         { *m = OCSPIdRequest{} }
func (m *OCSPIdRequest) String() string { return proto.CompactTextString(m) }
func (*OCSPIdRequest) ProtoMessage()    {}
func (*OCSPIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca_3d1cf0f2559c5724, []int{4}
}
func (m *OCSPIdRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OCSPIdRequest.Unmarshal(m, b)
}
func (m *OCSPIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OCSPIdRequest.Marshal(b, m, deterministic)
}
func (dst *OCSPIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OCSPIdRequest.Merge(dst, src)
}
func (m *OCSPIdRequest) XXX_Size() int {
	return xxx_messageInfo_OCSPIdRequest.Size(m)
}
func (m *OCSPIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_OCSPIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_OCSPIdRequest proto.InternalMessageInfo

func (m *OCSPIdRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *OCSPIdRequest) GetNonce() []byte {
	if m != nil {
		return m.Nonce
	}
	return nil
}

type OCSPCertRequest struct {
	Certificate          *corepb.Certificate `protobuf:"bytes,1,opt,name=Certificate,proto3" json:"Certificate,omitempty"`
	Nonce                []byte              `protobuf:"bytes,2,opt,name=Nonce,proto3" json:"Nonce,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *OCSPCertRequest) Reset()         { *m = OCSPCertRequest{} }
func (m *OCSPCertRequest) String() string { return proto.CompactTextString(m) }
func (*OCSPCertRequest) ProtoMessage()    {}
func (*OCSPCertRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca_3d1cf0f2559c5724, []int{5}
}
func (m *OCSPCertRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OCSPCertRequest.Unmarshal(m, b)
}
func (m *OCSPCertRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OCSPCertRequest.Marshal(b, m, deterministic)
}
func (dst *OCSPCertRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OCSPCertRequest.Merge(dst, src)
}
func (m *OCSPCertRequest) XXX_Size() int {
	return xxx_messageInfo_OCSPCertRequest.Size(m)
}
func (m *OCSPCertRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_OCSPCertRequest.DiscardUnknown(m)
}

var xxx_messageInfo_OCSPCertRequest proto.InternalMessageInfo

func (m *OCSPCertRequest) GetCertificate() *corepb.Certificate {
	if m != nil {
		return m.Certificate
	}
	return nil
}

func (m *OCSPCertRequest) GetNonce() []byte {
	if m != nil {
		return m.Nonce
	}
	return nil
}

func init() {
	proto.RegisterType((*CompleteOrderRequest)(nil), "sa.CompleteOrderRequest")
	proto.RegisterType((*CaCertificateList)(nil), "sa.CaCertificateList")
	proto.RegisterType((*GenerateCRLRequest)(nil), "sa.GenerateCRLRequest")
	proto.RegisterType((*OCSPResponse)(nil), "sa.OCSPResponse")
	proto.RegisterType((*OCSPIdRequest)(nil), "sa.OCSPIdRequest")
	proto.RegisterType((*OCSPCertRequest)(nil), "sa.OCSPCertRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CertificateAuthorityClient is the client API for CertificateAuthority service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CertificateAuthorityClient interface {
	CompleteOrder(ctx context.Context, in *CompleteOrderRequest, opts ...grpc.CallOption) (*corepb.Empty, error)
	GetCaCertificates(ctx context.Context, in *corepb.Empty, opts ...grpc.CallOption) (*CaCertificateList, error)
	GenerateCRL(ctx context.Context, in *corepb.IdRequest, opts ...grpc.CallOption) (*corepb.CRL, error)
	GenerateOCSPResponse(ctx context.Context, in *OCSPCertRequest, opts ...grpc.CallOption) (*OCSPResponse, error)
	GenerateOCSPResponseByID(ctx context.Context, in *OCSPIdRequest, opts ...grpc.CallOption) (*OCSPResponse, error)
}

type certificateAuthorityClient struct {
	cc *grpc.ClientConn
}

func NewCertificateAuthorityClient(cc *grpc.ClientConn) CertificateAuthorityClient {
	return &certificateAuthorityClient{cc}
}

func (c *certificateAuthorityClient) CompleteOrder(ctx context.Context, in *CompleteOrderRequest, opts ...grpc.CallOption) (*corepb.Empty, error) {
	out := new(corepb.Empty)
	err := c.cc.Invoke(ctx, "/sa.CertificateAuthority/CompleteOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certificateAuthorityClient) GetCaCertificates(ctx context.Context, in *corepb.Empty, opts ...grpc.CallOption) (*CaCertificateList, error) {
	out := new(CaCertificateList)
	err := c.cc.Invoke(ctx, "/sa.CertificateAuthority/GetCaCertificates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certificateAuthorityClient) GenerateCRL(ctx context.Context, in *corepb.IdRequest, opts ...grpc.CallOption) (*corepb.CRL, error) {
	out := new(corepb.CRL)
	err := c.cc.Invoke(ctx, "/sa.CertificateAuthority/GenerateCRL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certificateAuthorityClient) GenerateOCSPResponse(ctx context.Context, in *OCSPCertRequest, opts ...grpc.CallOption) (*OCSPResponse, error) {
	out := new(OCSPResponse)
	err := c.cc.Invoke(ctx, "/sa.CertificateAuthority/GenerateOCSPResponse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certificateAuthorityClient) GenerateOCSPResponseByID(ctx context.Context, in *OCSPIdRequest, opts ...grpc.CallOption) (*OCSPResponse, error) {
	out := new(OCSPResponse)
	err := c.cc.Invoke(ctx, "/sa.CertificateAuthority/GenerateOCSPResponseByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CertificateAuthorityServer is the server API for CertificateAuthority service.
type CertificateAuthorityServer interface {
	CompleteOrder(context.Context, *CompleteOrderRequest) (*corepb.Empty, error)
	GetCaCertificates(context.Context, *corepb.Empty) (*CaCertificateList, error)
	GenerateCRL(context.Context, *corepb.IdRequest) (*corepb.CRL, error)
	GenerateOCSPResponse(context.Context, *OCSPCertRequest) (*OCSPResponse, error)
	GenerateOCSPResponseByID(context.Context, *OCSPIdRequest) (*OCSPResponse, error)
}

func RegisterCertificateAuthorityServer(s *grpc.Server, srv CertificateAuthorityServer) {
	s.RegisterService(&_CertificateAuthority_serviceDesc, srv)
}

func _CertificateAuthority_CompleteOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertificateAuthorityServer).CompleteOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sa.CertificateAuthority/CompleteOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertificateAuthorityServer).CompleteOrder(ctx, req.(*CompleteOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CertificateAuthority_GetCaCertificates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(corepb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertificateAuthorityServer).GetCaCertificates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sa.CertificateAuthority/GetCaCertificates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertificateAuthorityServer).GetCaCertificates(ctx, req.(*corepb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CertificateAuthority_GenerateCRL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(corepb.IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertificateAuthorityServer).GenerateCRL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sa.CertificateAuthority/GenerateCRL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertificateAuthorityServer).GenerateCRL(ctx, req.(*corepb.IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CertificateAuthority_GenerateOCSPResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OCSPCertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertificateAuthorityServer).GenerateOCSPResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sa.CertificateAuthority/GenerateOCSPResponse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertificateAuthorityServer).GenerateOCSPResponse(ctx, req.(*OCSPCertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CertificateAuthority_GenerateOCSPResponseByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OCSPIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertificateAuthorityServer).GenerateOCSPResponseByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sa.CertificateAuthority/GenerateOCSPResponseByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertificateAuthorityServer).GenerateOCSPResponseByID(ctx, req.(*OCSPIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CertificateAuthority_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sa.CertificateAuthority",
	HandlerType: (*CertificateAuthorityServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CompleteOrder",
			Handler:    _CertificateAuthority_CompleteOrder_Handler,
		},
		{
			MethodName: "GetCaCertificates",
			Handler:    _CertificateAuthority_GetCaCertificates_Handler,
		},
		{
			MethodName: "GenerateCRL",
			Handler:    _CertificateAuthority_GenerateCRL_Handler,
		},
		{
			MethodName: "GenerateOCSPResponse",
			Handler:    _CertificateAuthority_GenerateOCSPResponse_Handler,
		},
		{
			MethodName: "GenerateOCSPResponseByID",
			Handler:    _CertificateAuthority_GenerateOCSPResponseByID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "capb/ca.proto",
}

func init() { proto.RegisterFile("capb/ca.proto", fileDescriptor_ca_3d1cf0f2559c5724) }

var fileDescriptor_ca_3d1cf0f2559c5724 = []byte{
	// 405 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0xcf, 0x6e, 0xd4, 0x30,
	0x10, 0xc6, 0x37, 0xe9, 0x1f, 0xd4, 0xc9, 0x2e, 0x6d, 0xa6, 0x01, 0x45, 0x39, 0x2d, 0xe6, 0xb2,
	0x12, 0x10, 0xa4, 0xad, 0x90, 0xe0, 0x84, 0x9a, 0x80, 0xaa, 0x88, 0x55, 0x8b, 0xcc, 0x0d, 0x71,
	0x71, 0x93, 0x41, 0x44, 0xb0, 0xeb, 0x60, 0xbb, 0x87, 0x7d, 0x25, 0x9e, 0x81, 0x87, 0x43, 0x4e,
	0x62, 0x9a, 0x54, 0x39, 0xc5, 0x33, 0xf9, 0xcd, 0xe7, 0x99, 0x6f, 0x0c, 0x8b, 0x52, 0x34, 0xb7,
	0xaf, 0x4b, 0x91, 0x36, 0x4a, 0x1a, 0x89, 0xbe, 0x16, 0x49, 0x58, 0x4a, 0x45, 0x36, 0x29, 0x15,
	0x75, 0x69, 0xf6, 0x09, 0xa2, 0x5c, 0x6e, 0x9b, 0x5f, 0x64, 0xe8, 0x46, 0x55, 0xa4, 0x38, 0xfd,
	0xbe, 0x23, 0x6d, 0xf0, 0x19, 0x1c, 0xb5, 0x71, 0xec, 0x2d, 0xbd, 0x55, 0xb0, 0x0e, 0xd2, 0xb6,
	0xa6, 0x43, 0xba, 0x3f, 0x78, 0x06, 0x07, 0xb9, 0x56, 0xb1, 0xbf, 0xf4, 0x56, 0x73, 0x6e, 0x8f,
	0x2c, 0x83, 0x30, 0x17, 0x39, 0x29, 0x53, 0x7f, 0xaf, 0x4b, 0x61, 0x68, 0x53, 0x6b, 0x83, 0xaf,
	0xe0, 0x51, 0x97, 0xd4, 0xb1, 0xb7, 0x3c, 0x58, 0x05, 0xeb, 0xf3, 0x4e, 0x6b, 0x44, 0x72, 0xc7,
	0xb0, 0x97, 0x80, 0x57, 0xb4, 0x23, 0x25, 0x0c, 0xe5, 0x7c, 0xe3, 0xda, 0x79, 0x0a, 0xc7, 0xb9,
	0xb8, 0x16, 0x5b, 0x6a, 0xfb, 0x39, 0xe1, 0x7d, 0xc4, 0x18, 0xcc, 0x6f, 0xf2, 0x2f, 0x9f, 0x39,
	0xe9, 0x46, 0xee, 0x34, 0x21, 0xc2, 0xa1, 0x8d, 0x5b, 0x6a, 0xce, 0xdb, 0x33, 0x7b, 0x03, 0x0b,
	0xfb, 0x2d, 0x2a, 0x27, 0xf6, 0x18, 0xfc, 0xa2, 0xea, 0x85, 0xfc, 0xa2, 0xc2, 0x08, 0x8e, 0xae,
	0xe5, 0xae, 0xa4, 0x7e, 0x94, 0x2e, 0x60, 0xdf, 0xe0, 0xd4, 0x96, 0xd9, 0xae, 0x5c, 0xe1, 0x05,
	0x04, 0x83, 0x9e, 0x7b, 0x6b, 0xc2, 0x7e, 0x9c, 0xc1, 0x30, 0x43, 0x6a, 0x5a, 0x7d, 0xfd, 0xd7,
	0x87, 0x68, 0x40, 0x5d, 0xde, 0x99, 0x1f, 0x52, 0xd5, 0x66, 0x8f, 0x6f, 0x61, 0x31, 0x5a, 0x08,
	0xc6, 0xa9, 0x16, 0xe9, 0xd4, 0x8e, 0x92, 0x7e, 0x29, 0x1f, 0xb7, 0x8d, 0xd9, 0xb3, 0x19, 0xbe,
	0x83, 0xf0, 0x8a, 0xcc, 0xc8, 0x56, 0x8d, 0x43, 0x26, 0x79, 0xd2, 0x4a, 0x3d, 0xdc, 0x10, 0x9b,
	0xe1, 0x0b, 0x08, 0x06, 0xa6, 0xe3, 0x69, 0x57, 0xf4, 0xdf, 0xb1, 0xe4, 0xa4, 0x9f, 0x91, 0x6f,
	0xd8, 0x0c, 0xdf, 0x43, 0xe4, 0xe0, 0x91, 0xf7, 0xe7, 0x56, 0xfd, 0x81, 0x65, 0xc9, 0x99, 0x4b,
	0x3a, 0x8c, 0xcd, 0xf0, 0x12, 0xe2, 0x29, 0x81, 0x6c, 0x5f, 0x7c, 0xc0, 0xd0, 0xf1, 0xf7, 0x97,
	0x4f, 0x48, 0x64, 0xcf, 0xbf, 0x1e, 0xda, 0xe7, 0xfd, 0xc7, 0x4f, 0x32, 0x55, 0x97, 0x3f, 0xd3,
	0x29, 0x2b, 0x6f, 0x8f, 0xdb, 0x27, 0x7e, 0xf1, 0x2f, 0x00, 0x00, 0xff, 0xff, 0xd1, 0xf4, 0x70,
	0x6e, 0x0a, 0x03, 0x00, 0x00,
}
