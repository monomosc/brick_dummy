// Code generated by protoc-gen-go. DO NOT EDIT.
// source: sapb/sa.proto

package sapb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import corepb "brick/grpc/corepb"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Nonce struct {
	N                    string   `protobuf:"bytes,1,opt,name=N,proto3" json:"N,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Nonce) Reset()         { *m = Nonce{} }
func (m *Nonce) String() string { return proto.CompactTextString(m) }
func (*Nonce) ProtoMessage()    {}
func (*Nonce) Descriptor() ([]byte, []int) {
	return fileDescriptor_sa_46bb9125a041cb98, []int{0}
}
func (m *Nonce) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Nonce.Unmarshal(m, b)
}
func (m *Nonce) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Nonce.Marshal(b, m, deterministic)
}
func (dst *Nonce) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Nonce.Merge(dst, src)
}
func (m *Nonce) XXX_Size() int {
	return xxx_messageInfo_Nonce.Size(m)
}
func (m *Nonce) XXX_DiscardUnknown() {
	xxx_messageInfo_Nonce.DiscardUnknown(m)
}

var xxx_messageInfo_Nonce proto.InternalMessageInfo

func (m *Nonce) GetN() string {
	if m != nil {
		return m.N
	}
	return ""
}

type IP struct {
	IP                   string   `protobuf:"bytes,1,opt,name=IP,proto3" json:"IP,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IP) Reset()         { *m = IP{} }
func (m *IP) String() string { return proto.CompactTextString(m) }
func (*IP) ProtoMessage()    {}
func (*IP) Descriptor() ([]byte, []int) {
	return fileDescriptor_sa_46bb9125a041cb98, []int{1}
}
func (m *IP) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IP.Unmarshal(m, b)
}
func (m *IP) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IP.Marshal(b, m, deterministic)
}
func (dst *IP) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IP.Merge(dst, src)
}
func (m *IP) XXX_Size() int {
	return xxx_messageInfo_IP.Size(m)
}
func (m *IP) XXX_DiscardUnknown() {
	xxx_messageInfo_IP.DiscardUnknown(m)
}

var xxx_messageInfo_IP proto.InternalMessageInfo

func (m *IP) GetIP() string {
	if m != nil {
		return m.IP
	}
	return ""
}

type AllowedToProceed struct {
	OK                   bool     `protobuf:"varint,1,opt,name=OK,proto3" json:"OK,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AllowedToProceed) Reset()         { *m = AllowedToProceed{} }
func (m *AllowedToProceed) String() string { return proto.CompactTextString(m) }
func (*AllowedToProceed) ProtoMessage()    {}
func (*AllowedToProceed) Descriptor() ([]byte, []int) {
	return fileDescriptor_sa_46bb9125a041cb98, []int{2}
}
func (m *AllowedToProceed) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AllowedToProceed.Unmarshal(m, b)
}
func (m *AllowedToProceed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AllowedToProceed.Marshal(b, m, deterministic)
}
func (dst *AllowedToProceed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllowedToProceed.Merge(dst, src)
}
func (m *AllowedToProceed) XXX_Size() int {
	return xxx_messageInfo_AllowedToProceed.Size(m)
}
func (m *AllowedToProceed) XXX_DiscardUnknown() {
	xxx_messageInfo_AllowedToProceed.DiscardUnknown(m)
}

var xxx_messageInfo_AllowedToProceed proto.InternalMessageInfo

func (m *AllowedToProceed) GetOK() bool {
	if m != nil {
		return m.OK
	}
	return false
}

type NewOrder struct {
	AuthzIDs               []string `protobuf:"bytes,1,rep,name=authzIDs,proto3" json:"authzIDs,omitempty"`
	ExpiresDate            string   `protobuf:"bytes,2,opt,name=expiresDate,proto3" json:"expiresDate,omitempty"`
	RequestedNotBeforeDate string   `protobuf:"bytes,6,opt,name=requestedNotBeforeDate,proto3" json:"requestedNotBeforeDate,omitempty"`
	RequestedNotAfterDate  string   `protobuf:"bytes,7,opt,name=requestedNotAfterDate,proto3" json:"requestedNotAfterDate,omitempty"`
	AccountId              string   `protobuf:"bytes,10,opt,name=AccountId,proto3" json:"AccountId,omitempty"`
	XXX_NoUnkeyedLiteral   struct{} `json:"-"`
	XXX_unrecognized       []byte   `json:"-"`
	XXX_sizecache          int32    `json:"-"`
}

func (m *NewOrder) Reset()         { *m = NewOrder{} }
func (m *NewOrder) String() string { return proto.CompactTextString(m) }
func (*NewOrder) ProtoMessage()    {}
func (*NewOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_sa_46bb9125a041cb98, []int{3}
}
func (m *NewOrder) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NewOrder.Unmarshal(m, b)
}
func (m *NewOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NewOrder.Marshal(b, m, deterministic)
}
func (dst *NewOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewOrder.Merge(dst, src)
}
func (m *NewOrder) XXX_Size() int {
	return xxx_messageInfo_NewOrder.Size(m)
}
func (m *NewOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_NewOrder.DiscardUnknown(m)
}

var xxx_messageInfo_NewOrder proto.InternalMessageInfo

func (m *NewOrder) GetAuthzIDs() []string {
	if m != nil {
		return m.AuthzIDs
	}
	return nil
}

func (m *NewOrder) GetExpiresDate() string {
	if m != nil {
		return m.ExpiresDate
	}
	return ""
}

func (m *NewOrder) GetRequestedNotBeforeDate() string {
	if m != nil {
		return m.RequestedNotBeforeDate
	}
	return ""
}

func (m *NewOrder) GetRequestedNotAfterDate() string {
	if m != nil {
		return m.RequestedNotAfterDate
	}
	return ""
}

func (m *NewOrder) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

type AccountAndIdent struct {
	AccountId            string             `protobuf:"bytes,1,opt,name=AccountId,proto3" json:"AccountId,omitempty"`
	Identifier           *corepb.Identifier `protobuf:"bytes,2,opt,name=Identifier,proto3" json:"Identifier,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *AccountAndIdent) Reset()         { *m = AccountAndIdent{} }
func (m *AccountAndIdent) String() string { return proto.CompactTextString(m) }
func (*AccountAndIdent) ProtoMessage()    {}
func (*AccountAndIdent) Descriptor() ([]byte, []int) {
	return fileDescriptor_sa_46bb9125a041cb98, []int{4}
}
func (m *AccountAndIdent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AccountAndIdent.Unmarshal(m, b)
}
func (m *AccountAndIdent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AccountAndIdent.Marshal(b, m, deterministic)
}
func (dst *AccountAndIdent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountAndIdent.Merge(dst, src)
}
func (m *AccountAndIdent) XXX_Size() int {
	return xxx_messageInfo_AccountAndIdent.Size(m)
}
func (m *AccountAndIdent) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountAndIdent.DiscardUnknown(m)
}

var xxx_messageInfo_AccountAndIdent proto.InternalMessageInfo

func (m *AccountAndIdent) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *AccountAndIdent) GetIdentifier() *corepb.Identifier {
	if m != nil {
		return m.Identifier
	}
	return nil
}

type NewStatusForId struct {
	Id                   string   `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Status               string   `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NewStatusForId) Reset()         { *m = NewStatusForId{} }
func (m *NewStatusForId) String() string { return proto.CompactTextString(m) }
func (*NewStatusForId) ProtoMessage()    {}
func (*NewStatusForId) Descriptor() ([]byte, []int) {
	return fileDescriptor_sa_46bb9125a041cb98, []int{5}
}
func (m *NewStatusForId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NewStatusForId.Unmarshal(m, b)
}
func (m *NewStatusForId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NewStatusForId.Marshal(b, m, deterministic)
}
func (dst *NewStatusForId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewStatusForId.Merge(dst, src)
}
func (m *NewStatusForId) XXX_Size() int {
	return xxx_messageInfo_NewStatusForId.Size(m)
}
func (m *NewStatusForId) XXX_DiscardUnknown() {
	xxx_messageInfo_NewStatusForId.DiscardUnknown(m)
}

var xxx_messageInfo_NewStatusForId proto.InternalMessageInfo

func (m *NewStatusForId) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *NewStatusForId) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

type NewAuthz struct {
	Challenges           []*corepb.Challenge `protobuf:"bytes,1,rep,name=Challenges,proto3" json:"Challenges,omitempty"`
	ExpiresDate          string              `protobuf:"bytes,2,opt,name=ExpiresDate,proto3" json:"ExpiresDate,omitempty"`
	Identifier           *corepb.Identifier  `protobuf:"bytes,3,opt,name=Identifier,proto3" json:"Identifier,omitempty"`
	AccountId            string              `protobuf:"bytes,4,opt,name=AccountId,proto3" json:"AccountId,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *NewAuthz) Reset()         { *m = NewAuthz{} }
func (m *NewAuthz) String() string { return proto.CompactTextString(m) }
func (*NewAuthz) ProtoMessage()    {}
func (*NewAuthz) Descriptor() ([]byte, []int) {
	return fileDescriptor_sa_46bb9125a041cb98, []int{6}
}
func (m *NewAuthz) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NewAuthz.Unmarshal(m, b)
}
func (m *NewAuthz) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NewAuthz.Marshal(b, m, deterministic)
}
func (dst *NewAuthz) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewAuthz.Merge(dst, src)
}
func (m *NewAuthz) XXX_Size() int {
	return xxx_messageInfo_NewAuthz.Size(m)
}
func (m *NewAuthz) XXX_DiscardUnknown() {
	xxx_messageInfo_NewAuthz.DiscardUnknown(m)
}

var xxx_messageInfo_NewAuthz proto.InternalMessageInfo

func (m *NewAuthz) GetChallenges() []*corepb.Challenge {
	if m != nil {
		return m.Challenges
	}
	return nil
}

func (m *NewAuthz) GetExpiresDate() string {
	if m != nil {
		return m.ExpiresDate
	}
	return ""
}

func (m *NewAuthz) GetIdentifier() *corepb.Identifier {
	if m != nil {
		return m.Identifier
	}
	return nil
}

func (m *NewAuthz) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

type UpdateAuthz struct {
	Id                   string            `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	NewStatus            string            `protobuf:"bytes,2,opt,name=newStatus,proto3" json:"newStatus,omitempty"`
	UpdatedChallenge     *corepb.Challenge `protobuf:"bytes,3,opt,name=updatedChallenge,proto3" json:"updatedChallenge,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *UpdateAuthz) Reset()         { *m = UpdateAuthz{} }
func (m *UpdateAuthz) String() string { return proto.CompactTextString(m) }
func (*UpdateAuthz) ProtoMessage()    {}
func (*UpdateAuthz) Descriptor() ([]byte, []int) {
	return fileDescriptor_sa_46bb9125a041cb98, []int{7}
}
func (m *UpdateAuthz) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateAuthz.Unmarshal(m, b)
}
func (m *UpdateAuthz) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateAuthz.Marshal(b, m, deterministic)
}
func (dst *UpdateAuthz) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateAuthz.Merge(dst, src)
}
func (m *UpdateAuthz) XXX_Size() int {
	return xxx_messageInfo_UpdateAuthz.Size(m)
}
func (m *UpdateAuthz) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateAuthz.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateAuthz proto.InternalMessageInfo

func (m *UpdateAuthz) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UpdateAuthz) GetNewStatus() string {
	if m != nil {
		return m.NewStatus
	}
	return ""
}

func (m *UpdateAuthz) GetUpdatedChallenge() *corepb.Challenge {
	if m != nil {
		return m.UpdatedChallenge
	}
	return nil
}

type AddChallengeToAuthz struct {
	Id                   string            `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Challenge            *corepb.Challenge `protobuf:"bytes,2,opt,name=challenge,proto3" json:"challenge,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *AddChallengeToAuthz) Reset()         { *m = AddChallengeToAuthz{} }
func (m *AddChallengeToAuthz) String() string { return proto.CompactTextString(m) }
func (*AddChallengeToAuthz) ProtoMessage()    {}
func (*AddChallengeToAuthz) Descriptor() ([]byte, []int) {
	return fileDescriptor_sa_46bb9125a041cb98, []int{8}
}
func (m *AddChallengeToAuthz) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddChallengeToAuthz.Unmarshal(m, b)
}
func (m *AddChallengeToAuthz) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddChallengeToAuthz.Marshal(b, m, deterministic)
}
func (dst *AddChallengeToAuthz) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddChallengeToAuthz.Merge(dst, src)
}
func (m *AddChallengeToAuthz) XXX_Size() int {
	return xxx_messageInfo_AddChallengeToAuthz.Size(m)
}
func (m *AddChallengeToAuthz) XXX_DiscardUnknown() {
	xxx_messageInfo_AddChallengeToAuthz.DiscardUnknown(m)
}

var xxx_messageInfo_AddChallengeToAuthz proto.InternalMessageInfo

func (m *AddChallengeToAuthz) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *AddChallengeToAuthz) GetChallenge() *corepb.Challenge {
	if m != nil {
		return m.Challenge
	}
	return nil
}

type NewCert struct {
	Identifiers          []string `protobuf:"bytes,1,rep,name=Identifiers,proto3" json:"Identifiers,omitempty"`
	CertDER              []byte   `protobuf:"bytes,2,opt,name=CertDER,proto3" json:"CertDER,omitempty"`
	OrderId              string   `protobuf:"bytes,3,opt,name=OrderId,proto3" json:"OrderId,omitempty"`
	CaCertId             string   `protobuf:"bytes,4,opt,name=CaCertId,proto3" json:"CaCertId,omitempty"`
	Serial               []byte   `protobuf:"bytes,5,opt,name=Serial,proto3" json:"Serial,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NewCert) Reset()         { *m = NewCert{} }
func (m *NewCert) String() string { return proto.CompactTextString(m) }
func (*NewCert) ProtoMessage()    {}
func (*NewCert) Descriptor() ([]byte, []int) {
	return fileDescriptor_sa_46bb9125a041cb98, []int{9}
}
func (m *NewCert) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NewCert.Unmarshal(m, b)
}
func (m *NewCert) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NewCert.Marshal(b, m, deterministic)
}
func (dst *NewCert) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewCert.Merge(dst, src)
}
func (m *NewCert) XXX_Size() int {
	return xxx_messageInfo_NewCert.Size(m)
}
func (m *NewCert) XXX_DiscardUnknown() {
	xxx_messageInfo_NewCert.DiscardUnknown(m)
}

var xxx_messageInfo_NewCert proto.InternalMessageInfo

func (m *NewCert) GetIdentifiers() []string {
	if m != nil {
		return m.Identifiers
	}
	return nil
}

func (m *NewCert) GetCertDER() []byte {
	if m != nil {
		return m.CertDER
	}
	return nil
}

func (m *NewCert) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

func (m *NewCert) GetCaCertId() string {
	if m != nil {
		return m.CaCertId
	}
	return ""
}

func (m *NewCert) GetSerial() []byte {
	if m != nil {
		return m.Serial
	}
	return nil
}

type RevokeCert struct {
	Id                   string   `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	RevocationReason     string   `protobuf:"bytes,2,opt,name=RevocationReason,proto3" json:"RevocationReason,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RevokeCert) Reset()         { *m = RevokeCert{} }
func (m *RevokeCert) String() string { return proto.CompactTextString(m) }
func (*RevokeCert) ProtoMessage()    {}
func (*RevokeCert) Descriptor() ([]byte, []int) {
	return fileDescriptor_sa_46bb9125a041cb98, []int{10}
}
func (m *RevokeCert) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RevokeCert.Unmarshal(m, b)
}
func (m *RevokeCert) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RevokeCert.Marshal(b, m, deterministic)
}
func (dst *RevokeCert) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RevokeCert.Merge(dst, src)
}
func (m *RevokeCert) XXX_Size() int {
	return xxx_messageInfo_RevokeCert.Size(m)
}
func (m *RevokeCert) XXX_DiscardUnknown() {
	xxx_messageInfo_RevokeCert.DiscardUnknown(m)
}

var xxx_messageInfo_RevokeCert proto.InternalMessageInfo

func (m *RevokeCert) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *RevokeCert) GetRevocationReason() string {
	if m != nil {
		return m.RevocationReason
	}
	return ""
}

type EnrichedChallenge struct {
	Challenge            *corepb.Challenge `protobuf:"bytes,1,opt,name=Challenge,proto3" json:"Challenge,omitempty"`
	AuthorizationId      string            `protobuf:"bytes,2,opt,name=AuthorizationId,proto3" json:"AuthorizationId,omitempty"`
	AccountId            string            `protobuf:"bytes,3,opt,name=AccountId,proto3" json:"AccountId,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *EnrichedChallenge) Reset()         { *m = EnrichedChallenge{} }
func (m *EnrichedChallenge) String() string { return proto.CompactTextString(m) }
func (*EnrichedChallenge) ProtoMessage()    {}
func (*EnrichedChallenge) Descriptor() ([]byte, []int) {
	return fileDescriptor_sa_46bb9125a041cb98, []int{11}
}
func (m *EnrichedChallenge) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EnrichedChallenge.Unmarshal(m, b)
}
func (m *EnrichedChallenge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EnrichedChallenge.Marshal(b, m, deterministic)
}
func (dst *EnrichedChallenge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnrichedChallenge.Merge(dst, src)
}
func (m *EnrichedChallenge) XXX_Size() int {
	return xxx_messageInfo_EnrichedChallenge.Size(m)
}
func (m *EnrichedChallenge) XXX_DiscardUnknown() {
	xxx_messageInfo_EnrichedChallenge.DiscardUnknown(m)
}

var xxx_messageInfo_EnrichedChallenge proto.InternalMessageInfo

func (m *EnrichedChallenge) GetChallenge() *corepb.Challenge {
	if m != nil {
		return m.Challenge
	}
	return nil
}

func (m *EnrichedChallenge) GetAuthorizationId() string {
	if m != nil {
		return m.AuthorizationId
	}
	return ""
}

func (m *EnrichedChallenge) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

type CertBySerial struct {
	Serial               []byte   `protobuf:"bytes,1,opt,name=serial,proto3" json:"serial,omitempty"`
	IssuerNameHash       []byte   `protobuf:"bytes,2,opt,name=issuerNameHash,proto3" json:"issuerNameHash,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CertBySerial) Reset()         { *m = CertBySerial{} }
func (m *CertBySerial) String() string { return proto.CompactTextString(m) }
func (*CertBySerial) ProtoMessage()    {}
func (*CertBySerial) Descriptor() ([]byte, []int) {
	return fileDescriptor_sa_46bb9125a041cb98, []int{12}
}
func (m *CertBySerial) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CertBySerial.Unmarshal(m, b)
}
func (m *CertBySerial) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CertBySerial.Marshal(b, m, deterministic)
}
func (dst *CertBySerial) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CertBySerial.Merge(dst, src)
}
func (m *CertBySerial) XXX_Size() int {
	return xxx_messageInfo_CertBySerial.Size(m)
}
func (m *CertBySerial) XXX_DiscardUnknown() {
	xxx_messageInfo_CertBySerial.DiscardUnknown(m)
}

var xxx_messageInfo_CertBySerial proto.InternalMessageInfo

func (m *CertBySerial) GetSerial() []byte {
	if m != nil {
		return m.Serial
	}
	return nil
}

func (m *CertBySerial) GetIssuerNameHash() []byte {
	if m != nil {
		return m.IssuerNameHash
	}
	return nil
}

type ExternalRequest struct {
	Identifier           string   `protobuf:"bytes,1,opt,name=Identifier,proto3" json:"Identifier,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExternalRequest) Reset()         { *m = ExternalRequest{} }
func (m *ExternalRequest) String() string { return proto.CompactTextString(m) }
func (*ExternalRequest) ProtoMessage()    {}
func (*ExternalRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_sa_46bb9125a041cb98, []int{13}
}
func (m *ExternalRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExternalRequest.Unmarshal(m, b)
}
func (m *ExternalRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExternalRequest.Marshal(b, m, deterministic)
}
func (dst *ExternalRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExternalRequest.Merge(dst, src)
}
func (m *ExternalRequest) XXX_Size() int {
	return xxx_messageInfo_ExternalRequest.Size(m)
}
func (m *ExternalRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ExternalRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ExternalRequest proto.InternalMessageInfo

func (m *ExternalRequest) GetIdentifier() string {
	if m != nil {
		return m.Identifier
	}
	return ""
}

func init() {
	proto.RegisterType((*Nonce)(nil), "sa.Nonce")
	proto.RegisterType((*IP)(nil), "sa.IP")
	proto.RegisterType((*AllowedToProceed)(nil), "sa.AllowedToProceed")
	proto.RegisterType((*NewOrder)(nil), "sa.newOrder")
	proto.RegisterType((*AccountAndIdent)(nil), "sa.AccountAndIdent")
	proto.RegisterType((*NewStatusForId)(nil), "sa.newStatusForId")
	proto.RegisterType((*NewAuthz)(nil), "sa.newAuthz")
	proto.RegisterType((*UpdateAuthz)(nil), "sa.updateAuthz")
	proto.RegisterType((*AddChallengeToAuthz)(nil), "sa.addChallengeToAuthz")
	proto.RegisterType((*NewCert)(nil), "sa.NewCert")
	proto.RegisterType((*RevokeCert)(nil), "sa.RevokeCert")
	proto.RegisterType((*EnrichedChallenge)(nil), "sa.EnrichedChallenge")
	proto.RegisterType((*CertBySerial)(nil), "sa.CertBySerial")
	proto.RegisterType((*ExternalRequest)(nil), "sa.ExternalRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// StorageAuthorityClient is the client API for StorageAuthority service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StorageAuthorityClient interface {
	// Account
	GetAccount(ctx context.Context, in *corepb.IdRequest, opts ...grpc.CallOption) (*corepb.Account, error)
	GetAccountOrderIDs(ctx context.Context, in *corepb.IdRequest, opts ...grpc.CallOption) (StorageAuthority_GetAccountOrderIDsClient, error)
	AddAccount(ctx context.Context, in *corepb.Account, opts ...grpc.CallOption) (*corepb.Empty, error)
	UpdateAccount(ctx context.Context, in *corepb.Account, opts ...grpc.CallOption) (*corepb.Empty, error)
	GetAllAccounts(ctx context.Context, in *corepb.Empty, opts ...grpc.CallOption) (StorageAuthority_GetAllAccountsClient, error)
	GetAccountByExternal(ctx context.Context, in *ExternalRequest, opts ...grpc.CallOption) (*corepb.Account, error)
	// Order
	AddOrder(ctx context.Context, in *NewOrder, opts ...grpc.CallOption) (*corepb.IdResponse, error)
	UpdateOrder(ctx context.Context, in *corepb.Order, opts ...grpc.CallOption) (*corepb.Empty, error)
	GetOrder(ctx context.Context, in *corepb.IdRequest, opts ...grpc.CallOption) (*corepb.Order, error)
	// Challenge
	AddChallenge(ctx context.Context, in *AddChallengeToAuthz, opts ...grpc.CallOption) (*corepb.Authorization, error)
	// Authorizations
	GetActiveAuthorization(ctx context.Context, in *AccountAndIdent, opts ...grpc.CallOption) (*corepb.Authorization, error)
	AddAuthorization(ctx context.Context, in *NewAuthz, opts ...grpc.CallOption) (*corepb.IdResponse, error)
	UpdateAuthorization(ctx context.Context, in *UpdateAuthz, opts ...grpc.CallOption) (*corepb.Authorization, error)
	UpdateAuthorizationStatus(ctx context.Context, in *NewStatusForId, opts ...grpc.CallOption) (*corepb.Empty, error)
	UpdateChallengeStatus(ctx context.Context, in *NewStatusForId, opts ...grpc.CallOption) (*corepb.Empty, error)
	GetAuthorization(ctx context.Context, in *corepb.IdRequest, opts ...grpc.CallOption) (*corepb.Authorization, error)
	GetAuthorizationsForAccount(ctx context.Context, in *corepb.IdRequest, opts ...grpc.CallOption) (StorageAuthority_GetAuthorizationsForAccountClient, error)
	GetChallenge(ctx context.Context, in *corepb.IdRequest, opts ...grpc.CallOption) (*EnrichedChallenge, error)
	// Certs
	AddCaCertificate(ctx context.Context, in *corepb.CaCertificate, opts ...grpc.CallOption) (*corepb.IdResponse, error)
	AddCertificate(ctx context.Context, in *NewCert, opts ...grpc.CallOption) (*corepb.IdResponse, error)
	GetCertificate(ctx context.Context, in *corepb.IdRequest, opts ...grpc.CallOption) (*corepb.Certificate, error)
	GetCaCertificate(ctx context.Context, in *corepb.IdRequest, opts ...grpc.CallOption) (*corepb.CaCertificate, error)
	RevokeCertificate(ctx context.Context, in *RevokeCert, opts ...grpc.CallOption) (*corepb.Empty, error)
	GetRevokedCertificates(ctx context.Context, in *corepb.IdRequest, opts ...grpc.CallOption) (*corepb.RevokedCertificates, error)
	GetCertificateBySerial(ctx context.Context, in *CertBySerial, opts ...grpc.CallOption) (*corepb.Certificate, error)
	// CRLs
	StoreCRL(ctx context.Context, in *corepb.CRL, opts ...grpc.CallOption) (*corepb.Empty, error)
	GetCRL(ctx context.Context, in *corepb.IdRequest, opts ...grpc.CallOption) (*corepb.CRL, error)
}

type storageAuthorityClient struct {
	cc *grpc.ClientConn
}

func NewStorageAuthorityClient(cc *grpc.ClientConn) StorageAuthorityClient {
	return &storageAuthorityClient{cc}
}

func (c *storageAuthorityClient) GetAccount(ctx context.Context, in *corepb.IdRequest, opts ...grpc.CallOption) (*corepb.Account, error) {
	out := new(corepb.Account)
	err := c.cc.Invoke(ctx, "/sa.StorageAuthority/GetAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageAuthorityClient) GetAccountOrderIDs(ctx context.Context, in *corepb.IdRequest, opts ...grpc.CallOption) (StorageAuthority_GetAccountOrderIDsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_StorageAuthority_serviceDesc.Streams[0], "/sa.StorageAuthority/GetAccountOrderIDs", opts...)
	if err != nil {
		return nil, err
	}
	x := &storageAuthorityGetAccountOrderIDsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StorageAuthority_GetAccountOrderIDsClient interface {
	Recv() (*corepb.IdResponse, error)
	grpc.ClientStream
}

type storageAuthorityGetAccountOrderIDsClient struct {
	grpc.ClientStream
}

func (x *storageAuthorityGetAccountOrderIDsClient) Recv() (*corepb.IdResponse, error) {
	m := new(corepb.IdResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *storageAuthorityClient) AddAccount(ctx context.Context, in *corepb.Account, opts ...grpc.CallOption) (*corepb.Empty, error) {
	out := new(corepb.Empty)
	err := c.cc.Invoke(ctx, "/sa.StorageAuthority/AddAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageAuthorityClient) UpdateAccount(ctx context.Context, in *corepb.Account, opts ...grpc.CallOption) (*corepb.Empty, error) {
	out := new(corepb.Empty)
	err := c.cc.Invoke(ctx, "/sa.StorageAuthority/UpdateAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageAuthorityClient) GetAllAccounts(ctx context.Context, in *corepb.Empty, opts ...grpc.CallOption) (StorageAuthority_GetAllAccountsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_StorageAuthority_serviceDesc.Streams[1], "/sa.StorageAuthority/GetAllAccounts", opts...)
	if err != nil {
		return nil, err
	}
	x := &storageAuthorityGetAllAccountsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StorageAuthority_GetAllAccountsClient interface {
	Recv() (*corepb.Account, error)
	grpc.ClientStream
}

type storageAuthorityGetAllAccountsClient struct {
	grpc.ClientStream
}

func (x *storageAuthorityGetAllAccountsClient) Recv() (*corepb.Account, error) {
	m := new(corepb.Account)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *storageAuthorityClient) GetAccountByExternal(ctx context.Context, in *ExternalRequest, opts ...grpc.CallOption) (*corepb.Account, error) {
	out := new(corepb.Account)
	err := c.cc.Invoke(ctx, "/sa.StorageAuthority/GetAccountByExternal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageAuthorityClient) AddOrder(ctx context.Context, in *NewOrder, opts ...grpc.CallOption) (*corepb.IdResponse, error) {
	out := new(corepb.IdResponse)
	err := c.cc.Invoke(ctx, "/sa.StorageAuthority/AddOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageAuthorityClient) UpdateOrder(ctx context.Context, in *corepb.Order, opts ...grpc.CallOption) (*corepb.Empty, error) {
	out := new(corepb.Empty)
	err := c.cc.Invoke(ctx, "/sa.StorageAuthority/UpdateOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageAuthorityClient) GetOrder(ctx context.Context, in *corepb.IdRequest, opts ...grpc.CallOption) (*corepb.Order, error) {
	out := new(corepb.Order)
	err := c.cc.Invoke(ctx, "/sa.StorageAuthority/GetOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageAuthorityClient) AddChallenge(ctx context.Context, in *AddChallengeToAuthz, opts ...grpc.CallOption) (*corepb.Authorization, error) {
	out := new(corepb.Authorization)
	err := c.cc.Invoke(ctx, "/sa.StorageAuthority/AddChallenge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageAuthorityClient) GetActiveAuthorization(ctx context.Context, in *AccountAndIdent, opts ...grpc.CallOption) (*corepb.Authorization, error) {
	out := new(corepb.Authorization)
	err := c.cc.Invoke(ctx, "/sa.StorageAuthority/GetActiveAuthorization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageAuthorityClient) AddAuthorization(ctx context.Context, in *NewAuthz, opts ...grpc.CallOption) (*corepb.IdResponse, error) {
	out := new(corepb.IdResponse)
	err := c.cc.Invoke(ctx, "/sa.StorageAuthority/AddAuthorization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageAuthorityClient) UpdateAuthorization(ctx context.Context, in *UpdateAuthz, opts ...grpc.CallOption) (*corepb.Authorization, error) {
	out := new(corepb.Authorization)
	err := c.cc.Invoke(ctx, "/sa.StorageAuthority/UpdateAuthorization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageAuthorityClient) UpdateAuthorizationStatus(ctx context.Context, in *NewStatusForId, opts ...grpc.CallOption) (*corepb.Empty, error) {
	out := new(corepb.Empty)
	err := c.cc.Invoke(ctx, "/sa.StorageAuthority/UpdateAuthorizationStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageAuthorityClient) UpdateChallengeStatus(ctx context.Context, in *NewStatusForId, opts ...grpc.CallOption) (*corepb.Empty, error) {
	out := new(corepb.Empty)
	err := c.cc.Invoke(ctx, "/sa.StorageAuthority/UpdateChallengeStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageAuthorityClient) GetAuthorization(ctx context.Context, in *corepb.IdRequest, opts ...grpc.CallOption) (*corepb.Authorization, error) {
	out := new(corepb.Authorization)
	err := c.cc.Invoke(ctx, "/sa.StorageAuthority/GetAuthorization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageAuthorityClient) GetAuthorizationsForAccount(ctx context.Context, in *corepb.IdRequest, opts ...grpc.CallOption) (StorageAuthority_GetAuthorizationsForAccountClient, error) {
	stream, err := c.cc.NewStream(ctx, &_StorageAuthority_serviceDesc.Streams[2], "/sa.StorageAuthority/GetAuthorizationsForAccount", opts...)
	if err != nil {
		return nil, err
	}
	x := &storageAuthorityGetAuthorizationsForAccountClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StorageAuthority_GetAuthorizationsForAccountClient interface {
	Recv() (*corepb.Authorization, error)
	grpc.ClientStream
}

type storageAuthorityGetAuthorizationsForAccountClient struct {
	grpc.ClientStream
}

func (x *storageAuthorityGetAuthorizationsForAccountClient) Recv() (*corepb.Authorization, error) {
	m := new(corepb.Authorization)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *storageAuthorityClient) GetChallenge(ctx context.Context, in *corepb.IdRequest, opts ...grpc.CallOption) (*EnrichedChallenge, error) {
	out := new(EnrichedChallenge)
	err := c.cc.Invoke(ctx, "/sa.StorageAuthority/GetChallenge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageAuthorityClient) AddCaCertificate(ctx context.Context, in *corepb.CaCertificate, opts ...grpc.CallOption) (*corepb.IdResponse, error) {
	out := new(corepb.IdResponse)
	err := c.cc.Invoke(ctx, "/sa.StorageAuthority/AddCaCertificate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageAuthorityClient) AddCertificate(ctx context.Context, in *NewCert, opts ...grpc.CallOption) (*corepb.IdResponse, error) {
	out := new(corepb.IdResponse)
	err := c.cc.Invoke(ctx, "/sa.StorageAuthority/AddCertificate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageAuthorityClient) GetCertificate(ctx context.Context, in *corepb.IdRequest, opts ...grpc.CallOption) (*corepb.Certificate, error) {
	out := new(corepb.Certificate)
	err := c.cc.Invoke(ctx, "/sa.StorageAuthority/GetCertificate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageAuthorityClient) GetCaCertificate(ctx context.Context, in *corepb.IdRequest, opts ...grpc.CallOption) (*corepb.CaCertificate, error) {
	out := new(corepb.CaCertificate)
	err := c.cc.Invoke(ctx, "/sa.StorageAuthority/GetCaCertificate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageAuthorityClient) RevokeCertificate(ctx context.Context, in *RevokeCert, opts ...grpc.CallOption) (*corepb.Empty, error) {
	out := new(corepb.Empty)
	err := c.cc.Invoke(ctx, "/sa.StorageAuthority/RevokeCertificate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageAuthorityClient) GetRevokedCertificates(ctx context.Context, in *corepb.IdRequest, opts ...grpc.CallOption) (*corepb.RevokedCertificates, error) {
	out := new(corepb.RevokedCertificates)
	err := c.cc.Invoke(ctx, "/sa.StorageAuthority/GetRevokedCertificates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageAuthorityClient) GetCertificateBySerial(ctx context.Context, in *CertBySerial, opts ...grpc.CallOption) (*corepb.Certificate, error) {
	out := new(corepb.Certificate)
	err := c.cc.Invoke(ctx, "/sa.StorageAuthority/GetCertificateBySerial", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageAuthorityClient) StoreCRL(ctx context.Context, in *corepb.CRL, opts ...grpc.CallOption) (*corepb.Empty, error) {
	out := new(corepb.Empty)
	err := c.cc.Invoke(ctx, "/sa.StorageAuthority/StoreCRL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageAuthorityClient) GetCRL(ctx context.Context, in *corepb.IdRequest, opts ...grpc.CallOption) (*corepb.CRL, error) {
	out := new(corepb.CRL)
	err := c.cc.Invoke(ctx, "/sa.StorageAuthority/GetCRL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StorageAuthorityServer is the server API for StorageAuthority service.
type StorageAuthorityServer interface {
	// Account
	GetAccount(context.Context, *corepb.IdRequest) (*corepb.Account, error)
	GetAccountOrderIDs(*corepb.IdRequest, StorageAuthority_GetAccountOrderIDsServer) error
	AddAccount(context.Context, *corepb.Account) (*corepb.Empty, error)
	UpdateAccount(context.Context, *corepb.Account) (*corepb.Empty, error)
	GetAllAccounts(*corepb.Empty, StorageAuthority_GetAllAccountsServer) error
	GetAccountByExternal(context.Context, *ExternalRequest) (*corepb.Account, error)
	// Order
	AddOrder(context.Context, *NewOrder) (*corepb.IdResponse, error)
	UpdateOrder(context.Context, *corepb.Order) (*corepb.Empty, error)
	GetOrder(context.Context, *corepb.IdRequest) (*corepb.Order, error)
	// Challenge
	AddChallenge(context.Context, *AddChallengeToAuthz) (*corepb.Authorization, error)
	// Authorizations
	GetActiveAuthorization(context.Context, *AccountAndIdent) (*corepb.Authorization, error)
	AddAuthorization(context.Context, *NewAuthz) (*corepb.IdResponse, error)
	UpdateAuthorization(context.Context, *UpdateAuthz) (*corepb.Authorization, error)
	UpdateAuthorizationStatus(context.Context, *NewStatusForId) (*corepb.Empty, error)
	UpdateChallengeStatus(context.Context, *NewStatusForId) (*corepb.Empty, error)
	GetAuthorization(context.Context, *corepb.IdRequest) (*corepb.Authorization, error)
	GetAuthorizationsForAccount(*corepb.IdRequest, StorageAuthority_GetAuthorizationsForAccountServer) error
	GetChallenge(context.Context, *corepb.IdRequest) (*EnrichedChallenge, error)
	// Certs
	AddCaCertificate(context.Context, *corepb.CaCertificate) (*corepb.IdResponse, error)
	AddCertificate(context.Context, *NewCert) (*corepb.IdResponse, error)
	GetCertificate(context.Context, *corepb.IdRequest) (*corepb.Certificate, error)
	GetCaCertificate(context.Context, *corepb.IdRequest) (*corepb.CaCertificate, error)
	RevokeCertificate(context.Context, *RevokeCert) (*corepb.Empty, error)
	GetRevokedCertificates(context.Context, *corepb.IdRequest) (*corepb.RevokedCertificates, error)
	GetCertificateBySerial(context.Context, *CertBySerial) (*corepb.Certificate, error)
	// CRLs
	StoreCRL(context.Context, *corepb.CRL) (*corepb.Empty, error)
	GetCRL(context.Context, *corepb.IdRequest) (*corepb.CRL, error)
}

func RegisterStorageAuthorityServer(s *grpc.Server, srv StorageAuthorityServer) {
	s.RegisterService(&_StorageAuthority_serviceDesc, srv)
}

func _StorageAuthority_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(corepb.IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageAuthorityServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sa.StorageAuthority/GetAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageAuthorityServer).GetAccount(ctx, req.(*corepb.IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageAuthority_GetAccountOrderIDs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(corepb.IdRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StorageAuthorityServer).GetAccountOrderIDs(m, &storageAuthorityGetAccountOrderIDsServer{stream})
}

type StorageAuthority_GetAccountOrderIDsServer interface {
	Send(*corepb.IdResponse) error
	grpc.ServerStream
}

type storageAuthorityGetAccountOrderIDsServer struct {
	grpc.ServerStream
}

func (x *storageAuthorityGetAccountOrderIDsServer) Send(m *corepb.IdResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _StorageAuthority_AddAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(corepb.Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageAuthorityServer).AddAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sa.StorageAuthority/AddAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageAuthorityServer).AddAccount(ctx, req.(*corepb.Account))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageAuthority_UpdateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(corepb.Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageAuthorityServer).UpdateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sa.StorageAuthority/UpdateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageAuthorityServer).UpdateAccount(ctx, req.(*corepb.Account))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageAuthority_GetAllAccounts_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(corepb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StorageAuthorityServer).GetAllAccounts(m, &storageAuthorityGetAllAccountsServer{stream})
}

type StorageAuthority_GetAllAccountsServer interface {
	Send(*corepb.Account) error
	grpc.ServerStream
}

type storageAuthorityGetAllAccountsServer struct {
	grpc.ServerStream
}

func (x *storageAuthorityGetAllAccountsServer) Send(m *corepb.Account) error {
	return x.ServerStream.SendMsg(m)
}

func _StorageAuthority_GetAccountByExternal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExternalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageAuthorityServer).GetAccountByExternal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sa.StorageAuthority/GetAccountByExternal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageAuthorityServer).GetAccountByExternal(ctx, req.(*ExternalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageAuthority_AddOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageAuthorityServer).AddOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sa.StorageAuthority/AddOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageAuthorityServer).AddOrder(ctx, req.(*NewOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageAuthority_UpdateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(corepb.Order)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageAuthorityServer).UpdateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sa.StorageAuthority/UpdateOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageAuthorityServer).UpdateOrder(ctx, req.(*corepb.Order))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageAuthority_GetOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(corepb.IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageAuthorityServer).GetOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sa.StorageAuthority/GetOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageAuthorityServer).GetOrder(ctx, req.(*corepb.IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageAuthority_AddChallenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddChallengeToAuthz)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageAuthorityServer).AddChallenge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sa.StorageAuthority/AddChallenge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageAuthorityServer).AddChallenge(ctx, req.(*AddChallengeToAuthz))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageAuthority_GetActiveAuthorization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountAndIdent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageAuthorityServer).GetActiveAuthorization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sa.StorageAuthority/GetActiveAuthorization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageAuthorityServer).GetActiveAuthorization(ctx, req.(*AccountAndIdent))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageAuthority_AddAuthorization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewAuthz)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageAuthorityServer).AddAuthorization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sa.StorageAuthority/AddAuthorization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageAuthorityServer).AddAuthorization(ctx, req.(*NewAuthz))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageAuthority_UpdateAuthorization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAuthz)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageAuthorityServer).UpdateAuthorization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sa.StorageAuthority/UpdateAuthorization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageAuthorityServer).UpdateAuthorization(ctx, req.(*UpdateAuthz))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageAuthority_UpdateAuthorizationStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewStatusForId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageAuthorityServer).UpdateAuthorizationStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sa.StorageAuthority/UpdateAuthorizationStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageAuthorityServer).UpdateAuthorizationStatus(ctx, req.(*NewStatusForId))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageAuthority_UpdateChallengeStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewStatusForId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageAuthorityServer).UpdateChallengeStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sa.StorageAuthority/UpdateChallengeStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageAuthorityServer).UpdateChallengeStatus(ctx, req.(*NewStatusForId))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageAuthority_GetAuthorization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(corepb.IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageAuthorityServer).GetAuthorization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sa.StorageAuthority/GetAuthorization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageAuthorityServer).GetAuthorization(ctx, req.(*corepb.IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageAuthority_GetAuthorizationsForAccount_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(corepb.IdRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StorageAuthorityServer).GetAuthorizationsForAccount(m, &storageAuthorityGetAuthorizationsForAccountServer{stream})
}

type StorageAuthority_GetAuthorizationsForAccountServer interface {
	Send(*corepb.Authorization) error
	grpc.ServerStream
}

type storageAuthorityGetAuthorizationsForAccountServer struct {
	grpc.ServerStream
}

func (x *storageAuthorityGetAuthorizationsForAccountServer) Send(m *corepb.Authorization) error {
	return x.ServerStream.SendMsg(m)
}

func _StorageAuthority_GetChallenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(corepb.IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageAuthorityServer).GetChallenge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sa.StorageAuthority/GetChallenge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageAuthorityServer).GetChallenge(ctx, req.(*corepb.IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageAuthority_AddCaCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(corepb.CaCertificate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageAuthorityServer).AddCaCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sa.StorageAuthority/AddCaCertificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageAuthorityServer).AddCaCertificate(ctx, req.(*corepb.CaCertificate))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageAuthority_AddCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewCert)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageAuthorityServer).AddCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sa.StorageAuthority/AddCertificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageAuthorityServer).AddCertificate(ctx, req.(*NewCert))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageAuthority_GetCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(corepb.IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageAuthorityServer).GetCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sa.StorageAuthority/GetCertificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageAuthorityServer).GetCertificate(ctx, req.(*corepb.IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageAuthority_GetCaCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(corepb.IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageAuthorityServer).GetCaCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sa.StorageAuthority/GetCaCertificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageAuthorityServer).GetCaCertificate(ctx, req.(*corepb.IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageAuthority_RevokeCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeCert)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageAuthorityServer).RevokeCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sa.StorageAuthority/RevokeCertificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageAuthorityServer).RevokeCertificate(ctx, req.(*RevokeCert))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageAuthority_GetRevokedCertificates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(corepb.IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageAuthorityServer).GetRevokedCertificates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sa.StorageAuthority/GetRevokedCertificates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageAuthorityServer).GetRevokedCertificates(ctx, req.(*corepb.IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageAuthority_GetCertificateBySerial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CertBySerial)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageAuthorityServer).GetCertificateBySerial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sa.StorageAuthority/GetCertificateBySerial",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageAuthorityServer).GetCertificateBySerial(ctx, req.(*CertBySerial))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageAuthority_StoreCRL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(corepb.CRL)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageAuthorityServer).StoreCRL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sa.StorageAuthority/StoreCRL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageAuthorityServer).StoreCRL(ctx, req.(*corepb.CRL))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageAuthority_GetCRL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(corepb.IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageAuthorityServer).GetCRL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sa.StorageAuthority/GetCRL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageAuthorityServer).GetCRL(ctx, req.(*corepb.IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _StorageAuthority_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sa.StorageAuthority",
	HandlerType: (*StorageAuthorityServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAccount",
			Handler:    _StorageAuthority_GetAccount_Handler,
		},
		{
			MethodName: "AddAccount",
			Handler:    _StorageAuthority_AddAccount_Handler,
		},
		{
			MethodName: "UpdateAccount",
			Handler:    _StorageAuthority_UpdateAccount_Handler,
		},
		{
			MethodName: "GetAccountByExternal",
			Handler:    _StorageAuthority_GetAccountByExternal_Handler,
		},
		{
			MethodName: "AddOrder",
			Handler:    _StorageAuthority_AddOrder_Handler,
		},
		{
			MethodName: "UpdateOrder",
			Handler:    _StorageAuthority_UpdateOrder_Handler,
		},
		{
			MethodName: "GetOrder",
			Handler:    _StorageAuthority_GetOrder_Handler,
		},
		{
			MethodName: "AddChallenge",
			Handler:    _StorageAuthority_AddChallenge_Handler,
		},
		{
			MethodName: "GetActiveAuthorization",
			Handler:    _StorageAuthority_GetActiveAuthorization_Handler,
		},
		{
			MethodName: "AddAuthorization",
			Handler:    _StorageAuthority_AddAuthorization_Handler,
		},
		{
			MethodName: "UpdateAuthorization",
			Handler:    _StorageAuthority_UpdateAuthorization_Handler,
		},
		{
			MethodName: "UpdateAuthorizationStatus",
			Handler:    _StorageAuthority_UpdateAuthorizationStatus_Handler,
		},
		{
			MethodName: "UpdateChallengeStatus",
			Handler:    _StorageAuthority_UpdateChallengeStatus_Handler,
		},
		{
			MethodName: "GetAuthorization",
			Handler:    _StorageAuthority_GetAuthorization_Handler,
		},
		{
			MethodName: "GetChallenge",
			Handler:    _StorageAuthority_GetChallenge_Handler,
		},
		{
			MethodName: "AddCaCertificate",
			Handler:    _StorageAuthority_AddCaCertificate_Handler,
		},
		{
			MethodName: "AddCertificate",
			Handler:    _StorageAuthority_AddCertificate_Handler,
		},
		{
			MethodName: "GetCertificate",
			Handler:    _StorageAuthority_GetCertificate_Handler,
		},
		{
			MethodName: "GetCaCertificate",
			Handler:    _StorageAuthority_GetCaCertificate_Handler,
		},
		{
			MethodName: "RevokeCertificate",
			Handler:    _StorageAuthority_RevokeCertificate_Handler,
		},
		{
			MethodName: "GetRevokedCertificates",
			Handler:    _StorageAuthority_GetRevokedCertificates_Handler,
		},
		{
			MethodName: "GetCertificateBySerial",
			Handler:    _StorageAuthority_GetCertificateBySerial_Handler,
		},
		{
			MethodName: "StoreCRL",
			Handler:    _StorageAuthority_StoreCRL_Handler,
		},
		{
			MethodName: "GetCRL",
			Handler:    _StorageAuthority_GetCRL_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAccountOrderIDs",
			Handler:       _StorageAuthority_GetAccountOrderIDs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAllAccounts",
			Handler:       _StorageAuthority_GetAllAccounts_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAuthorizationsForAccount",
			Handler:       _StorageAuthority_GetAuthorizationsForAccount_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "sapb/sa.proto",
}

// RateLimitingCacheClient is the client API for RateLimitingCache service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RateLimitingCacheClient interface {
	CallOccured(ctx context.Context, in *IP, opts ...grpc.CallOption) (*AllowedToProceed, error)
}

type rateLimitingCacheClient struct {
	cc *grpc.ClientConn
}

func NewRateLimitingCacheClient(cc *grpc.ClientConn) RateLimitingCacheClient {
	return &rateLimitingCacheClient{cc}
}

func (c *rateLimitingCacheClient) CallOccured(ctx context.Context, in *IP, opts ...grpc.CallOption) (*AllowedToProceed, error) {
	out := new(AllowedToProceed)
	err := c.cc.Invoke(ctx, "/sa.RateLimitingCache/CallOccured", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RateLimitingCacheServer is the server API for RateLimitingCache service.
type RateLimitingCacheServer interface {
	CallOccured(context.Context, *IP) (*AllowedToProceed, error)
}

func RegisterRateLimitingCacheServer(s *grpc.Server, srv RateLimitingCacheServer) {
	s.RegisterService(&_RateLimitingCache_serviceDesc, srv)
}

func _RateLimitingCache_CallOccured_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IP)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RateLimitingCacheServer).CallOccured(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sa.RateLimitingCache/CallOccured",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RateLimitingCacheServer).CallOccured(ctx, req.(*IP))
	}
	return interceptor(ctx, in, info, handler)
}

var _RateLimitingCache_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sa.RateLimitingCache",
	HandlerType: (*RateLimitingCacheServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CallOccured",
			Handler:    _RateLimitingCache_CallOccured_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sapb/sa.proto",
}

// NoncerClient is the client API for Noncer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NoncerClient interface {
	GenerateNonce(ctx context.Context, in *corepb.Empty, opts ...grpc.CallOption) (*Nonce, error)
	CheckNonce(ctx context.Context, in *Nonce, opts ...grpc.CallOption) (*AllowedToProceed, error)
}

type noncerClient struct {
	cc *grpc.ClientConn
}

func NewNoncerClient(cc *grpc.ClientConn) NoncerClient {
	return &noncerClient{cc}
}

func (c *noncerClient) GenerateNonce(ctx context.Context, in *corepb.Empty, opts ...grpc.CallOption) (*Nonce, error) {
	out := new(Nonce)
	err := c.cc.Invoke(ctx, "/sa.Noncer/GenerateNonce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noncerClient) CheckNonce(ctx context.Context, in *Nonce, opts ...grpc.CallOption) (*AllowedToProceed, error) {
	out := new(AllowedToProceed)
	err := c.cc.Invoke(ctx, "/sa.Noncer/CheckNonce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NoncerServer is the server API for Noncer service.
type NoncerServer interface {
	GenerateNonce(context.Context, *corepb.Empty) (*Nonce, error)
	CheckNonce(context.Context, *Nonce) (*AllowedToProceed, error)
}

func RegisterNoncerServer(s *grpc.Server, srv NoncerServer) {
	s.RegisterService(&_Noncer_serviceDesc, srv)
}

func _Noncer_GenerateNonce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(corepb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoncerServer).GenerateNonce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sa.Noncer/GenerateNonce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoncerServer).GenerateNonce(ctx, req.(*corepb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Noncer_CheckNonce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Nonce)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoncerServer).CheckNonce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sa.Noncer/CheckNonce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoncerServer).CheckNonce(ctx, req.(*Nonce))
	}
	return interceptor(ctx, in, info, handler)
}

var _Noncer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sa.Noncer",
	HandlerType: (*NoncerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateNonce",
			Handler:    _Noncer_GenerateNonce_Handler,
		},
		{
			MethodName: "CheckNonce",
			Handler:    _Noncer_CheckNonce_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sapb/sa.proto",
}

func init() { proto.RegisterFile("sapb/sa.proto", fileDescriptor_sa_46bb9125a041cb98) }

var fileDescriptor_sa_46bb9125a041cb98 = []byte{
	// 1119 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x56, 0xed, 0x6e, 0x1a, 0x47,
	0x17, 0x66, 0x49, 0x42, 0xe0, 0x80, 0x01, 0x8f, 0x3f, 0x5e, 0xc2, 0x1b, 0xb5, 0xd6, 0xa8, 0x8a,
	0x1c, 0xab, 0xc1, 0x0e, 0x8d, 0xa2, 0xa8, 0x69, 0x53, 0x01, 0x76, 0x1c, 0x14, 0x0b, 0x5b, 0x6b,
	0xe7, 0x4f, 0xff, 0x8d, 0x77, 0x8f, 0xed, 0x95, 0xf1, 0x2e, 0x9d, 0x1d, 0x62, 0x3b, 0x97, 0xd0,
	0xbf, 0xbd, 0x8b, 0x4a, 0xbd, 0x9b, 0x5e, 0x4a, 0x2f, 0xa0, 0x9a, 0x0f, 0xf6, 0x1b, 0xb5, 0xfd,
	0x03, 0x9a, 0x73, 0x9e, 0xe7, 0x7c, 0x3c, 0x33, 0x73, 0x66, 0x61, 0x25, 0x64, 0xb3, 0xf3, 0xdd,
	0x90, 0xf5, 0x66, 0x3c, 0x10, 0x01, 0x29, 0x87, 0xac, 0xbb, 0xea, 0x04, 0x1c, 0x67, 0xe7, 0xbb,
	0xf2, 0x4f, 0x9b, 0xe9, 0x06, 0x3c, 0x9a, 0x04, 0xbe, 0x83, 0xa4, 0x01, 0xd6, 0xa4, 0x63, 0x6d,
	0x59, 0xdb, 0x35, 0xdb, 0x9a, 0xd0, 0x75, 0x28, 0x8f, 0x4f, 0x48, 0x53, 0xfe, 0x1a, 0x63, 0x79,
	0x7c, 0x42, 0x29, 0xb4, 0x07, 0xd3, 0x69, 0x70, 0x8b, 0xee, 0x59, 0x70, 0xc2, 0x03, 0x07, 0xd1,
	0x95, 0x98, 0xe3, 0x8f, 0x0a, 0x53, 0xb5, 0xcb, 0xc7, 0x1f, 0xe9, 0x9f, 0x16, 0x54, 0x7d, 0xbc,
	0x3d, 0xe6, 0x2e, 0x72, 0xd2, 0x85, 0x2a, 0x9b, 0x8b, 0xab, 0x2f, 0xe3, 0xfd, 0xb0, 0x63, 0x6d,
	0x3d, 0xd8, 0xae, 0xd9, 0xd1, 0x9a, 0x6c, 0x41, 0x1d, 0xef, 0x66, 0x1e, 0xc7, 0x70, 0x9f, 0x09,
	0xec, 0x94, 0x55, 0x96, 0xa4, 0x89, 0xbc, 0x86, 0x4d, 0x8e, 0xbf, 0xcc, 0x31, 0x14, 0xe8, 0x4e,
	0x02, 0x31, 0xc4, 0x8b, 0x80, 0xa3, 0x02, 0x57, 0x14, 0x78, 0x89, 0x97, 0xbc, 0x82, 0x8d, 0xa4,
	0x67, 0x70, 0x21, 0x90, 0x2b, 0xda, 0x63, 0x45, 0x2b, 0x76, 0x92, 0xa7, 0x50, 0x1b, 0x38, 0x4e,
	0x30, 0xf7, 0xc5, 0xd8, 0xed, 0x80, 0x42, 0xc6, 0x06, 0xca, 0xa0, 0x65, 0x16, 0x03, 0xdf, 0x1d,
	0xbb, 0xe8, 0x8b, 0x34, 0xc1, 0xca, 0x10, 0xc8, 0x1e, 0x80, 0x82, 0x79, 0x17, 0x1e, 0x72, 0xd5,
	0x5d, 0xbd, 0xdf, 0xee, 0x29, 0xe5, 0x63, 0xbb, 0x9d, 0xc0, 0xd0, 0x37, 0xd0, 0xf4, 0xf1, 0xf6,
	0x54, 0x30, 0x31, 0x0f, 0xdf, 0x07, 0x7c, 0xac, 0xb4, 0x8d, 0x42, 0x97, 0xc7, 0x2e, 0xd9, 0x84,
	0x4a, 0xa8, 0xdc, 0x46, 0x2d, 0xb3, 0xa2, 0x7f, 0x68, 0xcd, 0x07, 0x52, 0x5a, 0xb2, 0x0b, 0x30,
	0xba, 0x62, 0xd3, 0x29, 0xfa, 0x97, 0xa8, 0x55, 0xaf, 0xf7, 0x5b, 0x3a, 0x71, 0x64, 0xb7, 0x13,
	0x10, 0xb9, 0x11, 0x07, 0xf9, 0x8d, 0x48, 0x98, 0x32, 0xbd, 0x3c, 0xf8, 0xe7, 0x5e, 0xd2, 0xda,
	0x3c, 0xcc, 0x8a, 0x79, 0x07, 0xf5, 0xf9, 0xcc, 0x65, 0x02, 0x75, 0xc5, 0xd9, 0x36, 0x9f, 0x42,
	0x2d, 0x12, 0xc2, 0x94, 0x13, 0x1b, 0xc8, 0x5b, 0x68, 0x6b, 0xb2, 0x1b, 0xf5, 0x60, 0x4a, 0xca,
	0x75, 0x99, 0x03, 0xd2, 0x33, 0x58, 0x63, 0x6e, 0xbc, 0x3e, 0x0b, 0x8a, 0x2b, 0x78, 0x01, 0x35,
	0x27, 0x0a, 0x5e, 0x2e, 0x0e, 0x1e, 0x23, 0xe8, 0x6f, 0x16, 0x3c, 0x9e, 0xe0, 0xed, 0x08, 0xb9,
	0x90, 0x6a, 0xc6, 0x3a, 0x2c, 0x4e, 0x7d, 0xd2, 0x44, 0x3a, 0xf0, 0x58, 0x22, 0xf7, 0x0f, 0x6c,
	0x15, 0xba, 0x61, 0x2f, 0x96, 0xd2, 0xa3, 0xee, 0xcd, 0xd8, 0x55, 0x1d, 0xd5, 0xec, 0xc5, 0x52,
	0x5e, 0xa4, 0x11, 0x93, 0xb0, 0x48, 0xce, 0x68, 0x2d, 0x4f, 0xc5, 0x29, 0x72, 0x8f, 0x4d, 0x3b,
	0x8f, 0x54, 0x38, 0xb3, 0xa2, 0x1f, 0x00, 0x6c, 0xfc, 0x1c, 0x5c, 0xa3, 0xaa, 0x2b, 0xdb, 0xe2,
	0x0e, 0xb4, 0xa5, 0xd7, 0x61, 0xc2, 0x0b, 0x7c, 0x1b, 0x59, 0x18, 0xf8, 0x46, 0xeb, 0x9c, 0x9d,
	0xfe, 0x6a, 0xc1, 0xea, 0x81, 0xcf, 0x3d, 0xe7, 0x2a, 0xa1, 0xa5, 0x14, 0x29, 0xde, 0x01, 0x6b,
	0x89, 0x48, 0x31, 0x7c, 0x1b, 0x5a, 0x52, 0xec, 0x80, 0x7b, 0x5f, 0x54, 0xec, 0xb1, 0x6b, 0xf2,
	0x65, 0xcd, 0xe9, 0xc3, 0xf3, 0x20, 0x7b, 0x78, 0x26, 0xd0, 0x90, 0x0d, 0x0d, 0xef, 0x75, 0x9b,
	0xea, 0x52, 0xe8, 0xf6, 0x2d, 0xdd, 0xbe, 0x5e, 0x91, 0x67, 0xd0, 0xf4, 0xc2, 0x70, 0x8e, 0x7c,
	0xc2, 0x6e, 0xf0, 0x03, 0x0b, 0xaf, 0x8c, 0xda, 0x19, 0x2b, 0x7d, 0x09, 0xad, 0x83, 0x3b, 0x81,
	0xdc, 0x67, 0x53, 0x5b, 0x0f, 0x06, 0xf2, 0x55, 0xea, 0xbc, 0x6b, 0xcd, 0x12, 0x96, 0xfe, 0x5f,
	0x75, 0x68, 0x9f, 0x8a, 0x80, 0xb3, 0x4b, 0x34, 0xb5, 0x8b, 0x7b, 0xd2, 0x03, 0x38, 0x44, 0x61,
	0xea, 0x24, 0xad, 0xc5, 0xf5, 0x30, 0x31, 0xbb, 0x2b, 0xda, 0x60, 0xfc, 0xb4, 0x44, 0xde, 0x02,
	0x89, 0xf1, 0x7a, 0x9f, 0xf7, 0xc3, 0x3c, 0xaf, 0x1d, 0x1b, 0xc2, 0x59, 0xe0, 0x87, 0x48, 0x4b,
	0x7b, 0x16, 0xd9, 0x01, 0x18, 0xb8, 0xee, 0x22, 0x59, 0x3a, 0x76, 0xb7, 0xae, 0x97, 0x07, 0x37,
	0x33, 0x71, 0x4f, 0x4b, 0xe4, 0x05, 0xac, 0x7c, 0xd2, 0xb7, 0xed, 0x5f, 0xc1, 0xf7, 0xa0, 0x29,
	0xeb, 0x9a, 0x4e, 0x8d, 0x3f, 0x24, 0x49, 0x40, 0xae, 0x8f, 0x3d, 0x8b, 0xfc, 0x00, 0xeb, 0x71,
	0x27, 0xc3, 0xfb, 0x85, 0x9a, 0x64, 0xad, 0x17, 0xb2, 0x5e, 0x46, 0xdb, 0xbc, 0x0e, 0xdf, 0x42,
	0x75, 0xe0, 0xba, 0xfa, 0xbd, 0x68, 0x48, 0xc6, 0xe2, 0xf5, 0x28, 0x6a, 0x9d, 0x3c, 0x87, 0xba,
	0x6e, 0x46, 0x13, 0x4c, 0x69, 0x1a, 0x9f, 0x69, 0x64, 0x07, 0xaa, 0x87, 0xa8, 0x95, 0xcd, 0xcb,
	0x9a, 0x24, 0xd2, 0x12, 0x79, 0x07, 0x8d, 0x41, 0x62, 0x2e, 0x90, 0xff, 0xc9, 0x42, 0x0a, 0x26,
	0x45, 0x77, 0xcd, 0x94, 0x9f, 0x3c, 0xb2, 0xb4, 0x44, 0xf6, 0x61, 0x53, 0x49, 0x20, 0xbc, 0xcf,
	0x98, 0xf2, 0x69, 0x11, 0x32, 0x4f, 0xc7, 0xb2, 0x28, 0xaf, 0xa0, 0x2d, 0x77, 0x35, 0xc5, 0x5f,
	0x48, 0xa2, 0xd3, 0x17, 0x49, 0xf2, 0x23, 0xac, 0x7d, 0x8a, 0xa6, 0x69, 0x4c, 0x6c, 0x49, 0x62,
	0x62, 0xcc, 0x2e, 0x4b, 0xfa, 0x0e, 0x9e, 0x14, 0xd0, 0xcd, 0xb0, 0x25, 0x26, 0x7b, 0xe2, 0x55,
	0xca, 0xca, 0xfc, 0x3d, 0x6c, 0x68, 0x7e, 0xa4, 0xd5, 0x7f, 0xe1, 0xb6, 0xa5, 0x6c, 0x99, 0xba,
	0x33, 0x5b, 0xb5, 0xa4, 0xee, 0x43, 0xf8, 0x7f, 0x96, 0x2b, 0x93, 0x2c, 0xbd, 0x80, 0xc5, 0x61,
	0xf6, 0x2c, 0xf2, 0x06, 0x1a, 0x87, 0x28, 0xe2, 0xbd, 0xcf, 0x31, 0x37, 0xd4, 0x39, 0xce, 0xce,
	0x3f, 0x75, 0x85, 0xe5, 0x7e, 0xe9, 0x41, 0xec, 0x5d, 0x78, 0x8e, 0x7c, 0x2b, 0x4d, 0x9a, 0x94,
	0xb1, 0x70, 0xdb, 0x5e, 0x42, 0x53, 0x92, 0x13, 0xd4, 0xba, 0xcc, 0x63, 0xde, 0x91, 0x42, 0xca,
	0x6b, 0x75, 0x35, 0x93, 0x94, 0x5c, 0xad, 0xab, 0x26, 0x7d, 0x8c, 0x89, 0x64, 0x4e, 0xd7, 0xb9,
	0x4c, 0x9f, 0x14, 0x8a, 0x96, 0x48, 0x1f, 0x56, 0xe3, 0x57, 0x64, 0x41, 0x6e, 0xca, 0x4a, 0x63,
	0x73, 0x76, 0x5b, 0xdf, 0xab, 0xdb, 0xa0, 0xfd, 0xc9, 0x0e, 0x0b, 0xc6, 0xdb, 0x13, 0x6d, 0x28,
	0xc0, 0xd2, 0x12, 0xf9, 0x49, 0xc5, 0x49, 0x18, 0xa3, 0xa1, 0xdf, 0x96, 0x05, 0x24, 0x9f, 0x81,
	0xe2, 0xc6, 0xbf, 0x81, 0xaa, 0x9c, 0xd3, 0x38, 0xb2, 0x8f, 0x48, 0xcd, 0x00, 0xec, 0xa3, 0x6c,
	0xb9, 0xcf, 0xa0, 0x22, 0xd3, 0xd8, 0x47, 0xf9, 0xf2, 0x62, 0x12, 0x2d, 0xf5, 0x87, 0xb0, 0x6a,
	0x33, 0x81, 0x47, 0xde, 0x8d, 0x27, 0x3c, 0xff, 0x72, 0xc4, 0x9c, 0x2b, 0xf9, 0x0a, 0xd6, 0x47,
	0x6c, 0x3a, 0x3d, 0x76, 0x9c, 0x39, 0x47, 0x97, 0x54, 0x64, 0x61, 0xe3, 0x93, 0xee, 0xba, 0xba,
	0xf6, 0x99, 0x8f, 0x65, 0x5a, 0xea, 0xbb, 0x50, 0x51, 0xdf, 0xdb, 0x9c, 0x3c, 0x87, 0x95, 0x43,
	0xf4, 0x91, 0x33, 0x81, 0xfa, 0x0b, 0x3c, 0x35, 0x66, 0x6b, 0xea, 0x2c, 0x48, 0x3b, 0x2d, 0xe9,
	0x4f, 0x3a, 0x74, 0xae, 0x35, 0x2e, 0x76, 0x2d, 0xcb, 0x32, 0xfc, 0xfa, 0xe7, 0x87, 0xf2, 0xeb,
	0xff, 0xf7, 0xf2, 0xe6, 0x90, 0x7b, 0xce, 0x75, 0x2f, 0xfb, 0x58, 0x9d, 0x57, 0xd4, 0xd7, 0xff,
	0x77, 0x7f, 0x07, 0x00, 0x00, 0xff, 0xff, 0x32, 0x0c, 0xb8, 0x0f, 0x25, 0x0c, 0x00, 0x00,
}
